{"version":3,"file":"application.bundle.js","sources":["../src/components/error/index.js","../src/components/geoip/index.js","../src/components/geoData/index.js","../src/application.js"],"sourcesContent":["export const Error =\r\n    {\r\n        data(): [] {\r\n            return {}\r\n        },\r\n\r\n        props: {\r\n            errors: {\r\n                type: Array,\r\n                default: []\r\n            },\r\n        },\r\n\r\n        methods: {\r\n        },\r\n\r\n        template: `\r\n            <div class=\"alert alert-danger\" role=\"alert\">\r\n              <h4 class=\"alert-heading\">Ошибка!</h4>\r\n              <template v-for=\"(value, index) in errors\" :key=\"index\">\r\n                <p class=\"error\">{{ value.message }}</p>\r\n              </template>\r\n            </div>\r\n        `\r\n    };","import {Error} from '../error';\r\nimport {GeoData} from '../geoData';\r\n\r\nexport const GeoIp =\r\n    {\r\n        components: {\r\n            Error,\r\n            GeoData\r\n        },\r\n\r\n        data(): [] {\r\n            return {\r\n                ip: '',\r\n                geoData: [],\r\n                errors: [],\r\n                requestInProcess: false,\r\n            }\r\n        },\r\n\r\n        computed: {\r\n            hasErrors(): boolean {\r\n                return this.errors.length > 0;\r\n            },\r\n            hasGeoData(): boolean {\r\n                return this.geoData.length > 0;\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            handleSubmit() {\r\n                if (this.requestInProcess) {\r\n                    return;\r\n                }\r\n\r\n                this.requestInProcess = true;\r\n                this.resetErrors();\r\n                this.resetGeoData();\r\n\r\n                if (this.ip.trim().length < 1) {\r\n                    this.requestInProcess = false;\r\n                    this.errors.push({'message': 'Не указан ip адрес!'});\r\n\r\n                    return;\r\n                }\r\n\r\n                this.request();\r\n            },\r\n\r\n            request(): void {\r\n                let self = this;\r\n\r\n                BX.ajax.runComponentAction(\r\n                    'vendor:geoip',\r\n                    'getIpInfo', {\r\n                        mode: 'ajax',\r\n                        data: {ip: self.ip}\r\n                    }\r\n                ).then(function (response) {\r\n                    self.requestInProcess = false;\r\n\r\n                    if (\r\n                        typeof response === 'object'\r\n                        && response?.status\r\n                        && response.status === 'success'\r\n                    ) {\r\n                        self.setGeoData([response?.data]);\r\n                    }\r\n                }).catch(error => {\r\n                    self.requestInProcess = false;\r\n\r\n                    if (\r\n                        error?.errors\r\n                        && error?.errors.length > 0\r\n                    ) {\r\n                        self.setErrors(error?.errors)\r\n                    }\r\n                });\r\n            },\r\n\r\n            setGeoData(data): void {\r\n                this.geoData = data;\r\n            },\r\n\r\n            resetGeoData(): void {\r\n                this.geoData = [];\r\n            },\r\n\r\n            setErrors(errors): void {\r\n                this.errors = errors;\r\n            },\r\n\r\n            resetErrors(): void {\r\n                this.errors = [];\r\n            },\r\n\r\n            validateInput(): void {\r\n                this.ip = this.ip.replace(/[^\\d.]/g, '');\r\n            }\r\n        },\r\n\r\n        template: `\r\n            <div class=\"w-50 mt-5\">\r\n                <form class=\"input-group mb-3\" @submit.prevent=\"handleSubmit\">\r\n                    <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        placeholder=\"Укажите IP-адрес\"\r\n                        v-on:input=\"validateInput\"\r\n                        v-model=\"ip\"\r\n                        >\r\n                    <button \r\n                        class=\"btn btn-outline-secondary\" \r\n                        type=\"submit\"\r\n                        id=\"button-addon2\"\r\n                    >\r\n                        Показать\r\n                    </button>\r\n                </form>\r\n                <template v-if=\"hasGeoData\">\r\n                   <GeoData :data=\"geoData\" />\r\n                </template>\r\n                <template v-if=\"hasErrors\">\r\n                   <Error :errors=\"errors\" />\r\n                </template>\r\n            </div>\r\n        `\r\n    };","export const GeoData =\r\n    {\r\n        data(): [] {\r\n            return {}\r\n        },\r\n\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: []\r\n            },\r\n        },\r\n\r\n        template: `\r\n            <div class=\"alert alert-light\" role=\"alert\">\r\n              <template v-for=\"(value, index) in data\" :key=\"index\">\r\n                <div><b>Город:</b> {{value.city ? value.city : '---' }}</div>\r\n                <div><b>Регион:</b> {{value.region ? value.region : '---' }}</div>\r\n                <div><b>Страна:</b> {{value.country ? value.country : '---' }}</div>\r\n              </template>\r\n            </div>\r\n        `\r\n    };","import {BitrixVue} from 'ui.vue3';\nimport {GeoIp} from './components/geoip';\n\nexport class Application\n{\n    constructor(rootNode): void\n    {\n        this.rootNode = document.querySelector(rootNode);\n    }\n\n    start(): void\n    {\n        this.attachTemplate();\n    }\n\n    attachTemplate(): void\n    {\n        let application = BitrixVue.createApp({\n            name: 'Application',\n            components: {\n                GeoIp\n            },\n            template: '<GeoIp/>'\n        });\n        application.mount(this.rootNode);\n    }\n}\n\n"],"names":["GeoIp","components","Error","data","props","errors","type","Array","default","methods","template","GeoData","ip","geoData","requestInProcess","computed","hasErrors","this","length","hasGeoData","handleSubmit","resetErrors","resetGeoData","trim","push","message","request","self","BX","ajax","runComponentAction","mode","then","response","status","setGeoData","catch","error","setErrors","validateInput","replace","constructor","rootNode","document","querySelector","start","attachTemplate","BitrixVue","createApp","name","mount"],"mappings":"4BAAO,MCGMA,EACT,CACIC,WAAY,CACRC,MDLR,CACIC,KAAI,KACO,IAGXC,MAAO,CACHC,OAAQ,CACJC,KAAMC,MACNC,QAAS,KAIjBC,QAAS,GAGTC,SAAW,gTCTPC,QCNR,CACIR,KAAI,KACO,IAGXC,MAAO,CACHD,KAAM,CACFG,KAAMC,MACNC,QAAS,KAIjBE,SAAW,6bDHXP,KAAI,KACO,CACHS,GAAI,GACJC,QAAS,GACTR,OAAQ,GACRS,kBAAkB,IAI1BC,SAAU,CACNC,YACI,OAAOC,KAAKZ,OAAOa,OAAS,GAEhCC,aACI,OAAOF,KAAKJ,QAAQK,OAAS,IAIrCT,QAAS,CACLW,eACI,IAAIH,KAAKH,iBAAT,CAQA,GAJAG,KAAKH,kBAAmB,EACxBG,KAAKI,cACLJ,KAAKK,eAEDL,KAAKL,GAAGW,OAAOL,OAAS,EAIxB,OAHAD,KAAKH,kBAAmB,OACxBG,KAAKZ,OAAOmB,KAAK,CAACC,QAAW,wBAKjCR,KAAKS,YAGTA,UACI,IAAIC,EAAOV,KAEXW,GAAGC,KAAKC,mBACJ,eACA,YAAa,CACTC,KAAM,OACN5B,KAAM,CAACS,GAAIe,EAAKf,MAEtBoB,MAAK,SAAUC,GACbN,EAAKb,kBAAmB,EAGA,iBAAbmB,SACJA,GAAAA,EAAUC,QACU,YAApBD,EAASC,QAEZP,EAAKQ,WAAW,OAACF,SAAAA,EAAU9B,UAEhCiC,MAAMC,IACLV,EAAKb,kBAAmB,QAGpBuB,GAAAA,EAAOhC,eACJgC,SAAAA,EAAOhC,OAAOa,QAAS,GAE1BS,EAAKW,gBAAUD,SAAAA,EAAOhC,WAKlC8B,WAAWhC,GACPc,KAAKJ,QAAUV,GAGnBmB,eACIL,KAAKJ,QAAU,IAGnByB,UAAUjC,GACNY,KAAKZ,OAASA,GAGlBgB,cACIJ,KAAKZ,OAAS,IAGlBkC,gBACItB,KAAKL,GAAKK,KAAKL,GAAG4B,QAAQ,UAAW,MAI7C9B,SAAW,49BE/Ff+B,YAAYC,GAERzB,KAAKyB,SAAWC,SAASC,cAAcF,GAG3CG,QAEI5B,KAAK6B,iBAGTA,iBAEsBC,YAAUC,UAAU,CAClCC,KAAM,cACNhD,WAAY,CACRD,MAAAA,GAEJU,SAAU,aAEFwC,MAAMjC,KAAKyB"}